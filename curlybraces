// Arduino Bluetooth Car
// SP Robotics and Arduino

int in1 = 7;
int in2 = 8;
int in3 = 9;
int in4 = 10;

 


int Ena = 10;
int Enb = 5;

 


void setup() {

 

 pinMode(in1, OUTPUT);
 pinMode(in2, OUTPUT);
 pinMode(in3, OUTPUT);
 pinMode(in4, OUTPUT);

 

 

 pinMode(Ena, OUTPUT);
 pinMode(Enb, OUTPUT);

 

 Serial.begin(9600);
} 

 

void loop() {
 if(Serial.available()){
       char data = Serial.read();
       Serial.println(data);

 

       if(data == 'F')
        forward(); 
       

 

       if(data == 'B')
        backward(); 
       

 

       if(data == 'R')
        turn_left(); 
       

 

       if(data == 'L')
        turn_right(); 
      
    if(data == 'S')
        st(); 
       
   
    }
  
else
{
  int distanceRight = 0; //initaial right distance.
int distanceLeft = 0; //initial left distance.
delay(50); //delay 50ms.
if (distance <= 40) //stop if distance is less then or equal to 40cm.
{
moveStop(); //if distance is less then or equal to 40cm start move stop function.
delay(300); //wait for 300ms.
moveBackward(); //go backward.
delay(400); //wait for 400ms.
moveStop(); //stop again.
delay(300); //wait 300 ms.
distanceRight = lookRight(); //store value of look right function on distance.
delay(300); //delay for 300ms.
distanceLeft = lookLeft(); //store value of look right function on distance.
delay(300); //delay for 300ms.
if (distanceRight >= distanceLeft) //if distance right is more then or equal to distance left.
{
turnRight(); //turn right function.
delay(800); //wheels will turn right for 800ms.
moveStop(); //stop after 800ms.
}
else
{
turnLeft(); //turn left function.
delay(1500); //wheels will turn left for 800ms.
moveStop(); //stop after 800ms.
}
}
else
{
moveForward(); //if distance is less then 40cm stop if not continue to move.
}
distance = readPing(); //distance function.
}
int lookRight() // Look Right Function for Servo Motor.
{
servo_motor.write(15); //turn servo motor at 15 degrees right.
delay(500); //will turn servo at 15 degrees and wait for 500ms.
int distance = readPing(); //after turning right read and store in read ping function.
delay(100); //wait 100ms for accurate measurements.
servo_motor.write(90); //return at initial state of servo which is 0 degrees.
return distance;
}
int lookLeft() // Look Left Function for Servo Motor .
{
servo_motor.write(180); //turn servo motor at 180 degrees right.
delay(500); //will turn servo at 180 degrees and wait for 500ms.
int distance = readPing(); //after turning right left and store in read ping function.
delay(100); //wait 100ms for accurate measurements.
servo_motor.write(90); //return at initial state of servo which is 90 degrees.
return distance;
}
int readPing() // Read Ping Function for Ultrasonic Sensor.
{
delay(100); // Wait 100ms between pings (about 20 pings/sec). 29ms should be the shortest delay between pings.
int cm = sonar.ping_cm(); //Send ping, get ping distance in centimeters (cm).
if (cm==0) //if cm is equal to zero cm is 250 function.
{
cm=250;
}
return cm;
}
} 


void forward(){
 
 analogWrite(Ena, 150);
 analogWrite(Enb, 150); 
 
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);
  digitalWrite(in3, HIGH);
  digitalWrite(in4, LOW);
}

 

void backward(){
   
   analogWrite(Ena, 150);
   analogWrite(Enb, 150); 
   
  digitalWrite(in1, LOW);
  digitalWrite(in2, HIGH);
  digitalWrite(in3, LOW);
  digitalWrite(in4, HIGH); 
}

 

void turn_left(){
  
   analogWrite(Ena, 150);
   analogWrite(Enb, 150); 
  
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, HIGH);
}

 

void turn_right(){
   
   analogWrite(Ena, 150);
   analogWrite(Enb, 150); 
  
  digitalWrite(in1, LOW);
  digitalWrite(in2, HIGH);
  digitalWrite(in3, HIGH);
  digitalWrite(in4, LOW);
}

 

void st(){
  
   analogWrite(Ena, 0);
   analogWrite(Enb, 0); 
  
  digitalWrite(in1, LOW);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, LOW); 
}  

void moveStop() // Move Stop Function for Motor Driver.
{
digitalWrite(RightMotorForward, LOW);
digitalWrite(RightMotorBackward, LOW);
digitalWrite(LeftMotorForward, LOW);
digitalWrite(LeftMotorBackward, LOW);
}

void moveForward() // Move Forward Function for Motor Driver.
{
digitalWrite(RightMotorForward, HIGH);
digitalWrite(RightMotorBackward, LOW);
digitalWrite(LeftMotorForward, HIGH);
digitalWrite(LeftMotorBackward, LOW);
}
void moveBackward() // Move Backward Function for Motor Driver.
{
digitalWrite(RightMotorForward, LOW);
digitalWrite(RightMotorBackward, HIGH);
digitalWrite(LeftMotorForward, LOW);
digitalWrite(LeftMotorBackward, HIGH);
}
void turnRight() // Turn Right Function for Motor Driver.
{
digitalWrite(RightMotorForward, LOW);
digitalWrite(RightMotorBackward, HIGH);
digitalWrite(LeftMotorForward, HIGH);
digitalWrite(LeftMotorBackward, LOW);
}

void turnLeft() // Turn Left Function for Motor Driver.
{
digitalWrite(RightMotorForward, HIGH);
digitalWrite(RightMotorBackward, LOW);
digitalWrite(LeftMotorForward, LOW);
digitalWrite(LeftMotorBackward, HIGH);
}
